contact-form-api/
│
├── main.tf
├── variables.tf
├── outputs.tf
│
├── modules/
│   ├── lambda/
│   ├── api_gateway/
│   ├── dynamodb/
│   ├── ses/
│   └── iam/
│
├── lambda/
│   └── handler.py
└── terraform.tfvars

resource "aws_lambda_function" "contact_handler" {
  function_name = var.lambda_name
  role          = var.lambda_role_arn
  handler       = var.handler
  runtime       = var.runtime
  filename      = var.lambda_zip_path
  timeout       = 10
  environment {
    variables = var.env_vars
  }
}

resource "aws_lambda_permission" "apigw" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.contact_handler.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = var.source_arn
}


-------
variable "lambda_name" {}
variable "lambda_role_arn" {}
variable "handler" {}
variable "runtime" {}
variable "lambda_zip_path" {}
variable "env_vars" {}
variable "source_arn" {}

------
resource "aws_api_gateway_rest_api" "contact_api" {
  name = var.api_name
}

resource "aws_api_gateway_resource" "contact" {
  rest_api_id = aws_api_gateway_rest_api.contact_api.id
  parent_id   = aws_api_gateway_rest_api.contact_api.root_resource_id
  path_part   = "contact"
}

resource "aws_api_gateway_method" "post" {
  rest_api_id   = aws_api_gateway_rest_api.contact_api.id
  resource_id   = aws_api_gateway_resource.contact.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "lambda" {
  rest_api_id = aws_api_gateway_rest_api.contact_api.id
  resource_id = aws_api_gateway_resource.contact.id
  http_method = aws_api_gateway_method.post.http_method

  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = var.lambda_uri
}

resource "aws_api_gateway_deployment" "deploy" {
  depends_on = [aws_api_gateway_integration.lambda]
  rest_api_id = aws_api_gateway_rest_api.contact_api.id
  stage_name  = "prod"
}

output "api_endpoint" {
  value = "${aws_api_gateway_deployment.deploy.invoke_url}/contact"
}

-------


variable "api_name" {}
variable "lambda_uri" {}


-----

resource "aws_dynamodb_table" "contact_form" {
  name           = var.table_name
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }
}

-----

variable "table_name" {}

------

resource "aws_ses_email_identity" "notify_email" {
  email = var.email
}

---1

variable "email" {}

------

resource "aws_iam_role" "lambda_role" {
  name = "lambda_contact_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action    = "sts:AssumeRole"
      Effect    = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "lambda_policy" {
  name = "lambda_contact_policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = ["dynamodb:PutItem"],
        Effect = "Allow",
        Resource = var.dynamodb_arn
      },
      {
        Action = ["ses:SendEmail"],
        Effect = "Allow",
        Resource = "*"
      },
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Effect   = "Allow",
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_attach" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

output "lambda_role_arn" {
  value = aws_iam_role.lambda_role.arn
}

-------

variable "dynamodb_arn" {}

-----

provider "aws" {
  region = "us-east-1"
}

module "dynamodb" {
  source     = "./modules/dynamodb"
  table_name = "contact_form_submissions"
}

module "ses" {
  source = "./modules/ses"
  email  = "your-verified-email@example.com"
}

module "iam" {
  source       = "./modules/iam"
  dynamodb_arn = module.dynamodb.dynamodb_table_arn
}

module "lambda" {
  source           = "./modules/lambda"
  lambda_name      = "contact_form_lambda"
  lambda_role_arn  = module.iam.lambda_role_arn
  handler          = "handler.lambda_handler"
  runtime          = "python3.10"
  lambda_zip_path  = "lambda.zip"
  env_vars = {
    TABLE_NAME = "contact_form_submissions"
    EMAIL_TO   = "your-verified-email@example.com"
  }
  source_arn = "arn:aws:execute-api:*:*:*/*/POST/contact"
}

module "api_gateway" {
  source     = "./modules/api_gateway"
  api_name   = "contact_form_api"
  lambda_uri = module.lambda.contact_handler_invoke_arn
}

output "api_url" {
  value = module.api_gateway.api_endpoint
}

------

import os
import json
import boto3
from uuid import uuid4

dynamodb = boto3.resource('dynamodb')
ses = boto3.client('ses')

TABLE_NAME = os.environ['TABLE_NAME']
EMAIL_TO = os.environ['EMAIL_TO']

def lambda_handler(event, context):
    data = json.loads(event['body'])
    item = {
        'id': str(uuid4()),
        'name': data['name'],
        'email': data['email'],
        'message': data['message']
    }

    # Store to DynamoDB
    table = dynamodb.Table(TABLE_NAME)
    table.put_item(Item=item)

    # Send Email
    ses.send_email(
        Source=EMAIL_TO,
        Destination={'ToAddresses': [EMAIL_TO]},
        Message={
            'Subject': {'Data': 'New Contact Form Submission'},
            'Body': {'Text': {'Data': json.dumps(item, indent=2)}}
        }
    )

    return {
        'statusCode': 200,
        'body': json.dumps({'message': 'Form submitted successfully!'})
    }



